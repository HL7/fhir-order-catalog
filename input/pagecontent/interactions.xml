<div xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://hl7.org/fhir ../../input-cache/schemas-r5/fhir-single.xsd">
  <p>As explained in <a href="http://hl7.org/fhir/exchange-module.html#rest">its Exchange Module,
    </a> the FHIR standard RESTful API is a general-purpose interface that can be used to push and
    pull data between systems. Which is appropriate depends on architecture and deployment
    considerations.</p>
  <p>This page guides the various possibilities of interactions between a <b>catalog custodian</b>
    and a <b>catalog consumer</b>, as well as between a <b>catalog owner</b> and a <b>catalog
      custodian</b> when these two roles happen to be played by two distinct systems. These three
    roles are defined in <a href="index.html#scope">section <i>Scope and Roles</i> of the Home page
      of this guide</a>. This guidance is applicable to any kind of catalog (drugs, devices,
    knowledge artifacts, laboratory services ...)</p>
  <br/>
  <a name="SearchAndRetrieveContent"> </a>
  <h3>Search and retrieve content from a catalog (pull mode)</h3>
  <img src="interactionSearchRetievePull.png" alt="Pull interactions by consumer" width="500px"/>
  <p>Implementations of FHIR Catalog commonly assign a FHIR server to the system playing the role of
    catalog custodian, and FHIR clients to the systems playing the role of catalog consumer. This
    architectural choice is the one that minimizes the implementation cost on the consumer side,
    which is by far, the side with the biggest number of stakeholders. In this architecture,
    consumers search through the catalog and pull the content they are interested in using http GET
    commands, conforming to the FHIR <a href="http://hl7.org/fhir/http.html#3.1.0">RESTful API</a>. </p>
  <p>This most common mode of interaction is further guided for each kind of catalog, in the pages
    of this guide, accessible through the Specification option of the top menu bar.</p>
  <br/>
  <a name="ImportCatalog"> </a>
  <h3>Import a catalog or a subset of it (pull mode)</h3>
  <img src="interactionImportPull.png" alt="Import interaction by consumer" width="500px"/>
  <p> A <b>catalog consumer</b> may want to import the content of a full catalog or of a subset of
    it onto its own system. To do so, the <b>catalog consumer</b> uses an http GET interaction,
    positioning appropriate search parameters to delineate the content it wants to import.</p>
  <p>Among these parameters, the catalog consumer SHALL use the <code>_include:iterate=*</code>
    parameter, in order to instruct the <b>catalog custodian</b> to return not only the resources
    representing the overview of the catalog items, but also all the supporting resources referenced
    by these, so as to obtain the fully detailed definition of each item in the imported
    catalog.</p>
  <p>Given the fact that catalogs are often cumbersome objects, the <b>catalog custodian</b> is
    expected to use the paging mechanism to split its response into as many pages as needed, as
    specified in <a href="http://hl7.org/fhir/http.html#paging">the FHIR RESTful API</a>.</p>
  <p>The <b>catalog consumer</b> may indicate its own maximum limit by providing the
      <code>_count</code> parameter with the maximum number of resources to be returned in a single
    Bundle page, as explained in <a href="http://hl7.org/fhir/search.html#count">FHIR Search
      specification</a>.</p>
  <p>Except in case of error, the response from the server is a Bundle resource, with:</p>
  <ul>
    <li><code>Bundle.type = searchset</code></li>
    <li><code>Bundle.total = [total number of resources contained in the imported catalog (or
        catalog subset)]</code></li>
  </ul>
  <p>As said above, the Bundle may be split in pages, in which case each page contains these
    elements:</p>
  <ul>
    <li><code>Bundle.link</code> with <code>relation = self</code> and <code>url = [the current
        Bundle page]</code></li>
    <li><code>Bundle.link</code> with <code>relation = first</code> and <code>url = [the first
        Bundle page]</code></li>
    <li><code>Bundle.link</code> with <code>relation = previous</code> and <code>url = [the previous
        Bundle page]</code> (except on the first page)</li>
    <li><code>Bundle.link</code> with <code>relation = next</code> and <code>url = [the next Bundle
        page]</code> (except on the last page)</li>
    <li><code>Bundle.link</code> with <code>relation = last</code> and <code>url = [the last Bundle
        page]</code></li>
  </ul>
  <p>The links are opaque to the client, have no dictated structure, and only the catalog server
    understands them. The <b>catalog consumer</b> requests the next page using an http <code>GET
      [url associated with the current Bundle.link.relation = next]</code> until the last page is
    reached.</p>
  <p>The <b>catalog consumer</b> can, thus, maintain its own local copy of a subset of the catalog.
    This local copy has of course its own physical url for each of its resources. The canonical url
    of each resource is used to manage the updates: When importing a new update from the global
    catalog, the canonical url of each resource is used to match the new instance imported to the
    previous version stored locally.</p>
  <br/>
  <a name="PushInteractions"> </a>
  <h3>Push mode interactions: export and update</h3>
  <img src="interactionExportPush.png" alt="Export interaction by custodian" width="560px"/>
  <p>A catalog custodian may have agreed to work in push mode with some of its consumers, for
    instance to support use case <b>Customized catalog shared in push mode</b> depicted in the <a
      href="uclabservices.html">Laboratory services use cases</a> section of this guide. To
    implement such a use case, the messaging paradigm is chosen as it is the least intrusive on the
    catalog consumer side. Thus, in case they want to support push interactions, catalog custodians
    and consumers rely on the <a href="http://hl7.org/fhir/messaging.html#3.4">FHIR messaging
      framework</a>. In particular, the consumer must be able to receive <code>request
      messages</code> from the catalog custodian and to send back <code>response messages</code> to
    it. The request message consists of a <code>Bundle</code> of <code>type "message"</code>, with
    the first resource in the bundle being a <code>MessageHeader</code>. The event representing the
    kind of request is populated in <code>MessageHeader.eventCoding</code>. Two events are
    defined:</p>
  <ul>
    <li><code>full-catalog</code> requests the receiver to initialize (or reinitialize) its local
      catalog from the content of the received message, which represents the comprehensive content
      of the local catalog.</li>
    <li><code>update-catalog</code> requests the receiver to update its local catalog from the
      content of the received message, which represents the differential, i.e. the resources that
      need to be inserted or updated into the local catalog.</li>
  </ul>
  <p>The other resources in the <code>Bundle</code> represent the content of the catalog (or of its
    update). The first of these resources is the Composition resource representing the catalog
    header.</p>
  <p> One way to proceed is to initialize the consumer's local catalog with the catalog custodian
    sending a message with the <code>full-catalog</code> event, and from that point, sending only
    updates (with the <code>update-catalog</code> event) on a regular basis.</p>
  <p>The exact mechanism of transfer of the messages from source to destination is irrelevant to the
    FHIR standard as well as to this implementation guide. It may include file transfer, HTTP based
    transfer, MLLP (HL7 minimal lower layer protocol), MQ series messaging or anything else. The
    only requirement for the transfer layer is that requests are sent to a known location and
    responses are returned to the source of the request.</p>
  <p>For this messaging paradigm, this implementation guide provides the <a
      href="StructureDefinition-CatalogMessageDefinition.html"> CatalogMessageDefinition</a> profile
    of the <code>MessageDefinition</code> resource, with two examples: </p>
  <ul>
    <li><a href="MessageDefinition-example-message-definition-initialize.html">
        example-message-definition-initialize</a>,</li>
    <li><a href="MessageDefinition-example-message-definition-update.html">
        example-message-definition-update</a>.</li>
  </ul>
  <br/>
  <a name="AdminCatalog"> </a>
  <h3>Administer a catalog through the FHIR API between catalog owner and catalog custodian</h3>
  <img src="interactionAdminPush.png" alt="Update interaction by owner" width="600px"/>
  <p>The <b>catalog owner</b> may manage the content of its catalog in its own proprietary format,
    delegating to a third party the role of <b>catalog custodian</b> (i.e. the organization and
    system publishing the catalog as a set of sharable FHIR resources towards the <b>catalog
      consumers</b>. In this configuration, the <b>catalog owner</b> is a FHIR client with
    additional permissions (create, update, delete, patch) on catalog resources of the catalog
    custodian. The other clients representing <b>catalog consumers</b> only have the read
    permission. </p>
  <p>Stewardship of the catalog content is handled through FHIR (create|read|update|patch|delete)
    interactions initiated by the <b>catalog owner</b> towards the <b>catalog custodian</b>. </p>
  <p>In most kinds of catalogs an item usually needs more than one resource for its full
    representation. For instance in a laboratory compendium, a laboratory service is represented by
    a <code>PlanDefinition</code> associated with a number of {<code>ActivityDefinition</code>} +
      {<code>SpecimenDefinition</code>} + {<code>ObservationDefinition</code>}. Thus inserting a new
    item in a catalog, or updating it, or removing it needs a simultaneous and consistent set of
    interactions on multiple resources in the catalog. For this reason, the <b>catalog owner</b>
    administers the content of the catalog in a transactional manner, interacting with the
      <b>catalog custodian</b> by posting a <code>transaction Bundle</code> to it, and checking the
      <code>transaction-response Bundle</code> from it to ensure good synchronization of the catalog
    content across both parties. </p>
  <p>This implementation guide provides for this purpose these two profiles of the Bundle
    resource:</p>
  <ul>
    <li>The <a href="StructureDefinition-ItemTransactionRequest.html"> ItemTransactionRequest</a>
      profile constraining <code>transaction Bundle</code> posted by the <b>catalog owner</b>; see
      also the <a href="Bundle-example-lab-test-creation-transaction-request.html">
        example-lab-test-creation-transaction-request</a>.</li>
    <li>The <a href="StructureDefinition-ItemTransactionResponse.html"> ItemTransactionResponse</a>
      profile constraining <code>transaction-response Bundle</code> returned back by the <b>catalog
        custodian</b>; See also the <a
        href="Bundle-example-lab-test-creation-transaction-response.html">
        example-lab-test-creation-transaction-response</a>.</li>
  </ul>
  <p>Delete operations requested atomically by the <b>catalog owner</b> are to be accepted and
    performed by the <b>catalog custodian</b> after having checked that the resource to be deleted
    is not referenced by any other resource. If this is not the case the operation is rejected with
    an OperationOutcome. In the case of a transaction request containing a delete operation, this
    operation will be performed only if the resource to be deleted is not referenced from elsewhere
    given all other operations of the transaction. If it is not the case the whole transaction is
    rejected with an OperationOutcome.</p>
  <br/>
  <a name="Subscriptions"> </a>
  <h3>Combining pull mode with subscriptions to notifications in push mode</h3>
  <p>The subscription mechanism is used to establish proactive event notifications from a FHIR
    server to another system. Implementing this mechanism in the context of this guide allows
    catalog consumers to request event notifications from a catalog custodian. These event
    notifications are subscribed by the catalog consumers, within a predefined topic supported by
    the catalog custodian. The consumers can further refine the notifications they expect, by
    selecting filters, among those predefined for the topic by the catalog custodian.</p>
  <p>This subscription mechanism is more properly defined in R5 and is to be specified in detail here
    as the IG is migrated to R5. The mechanism uses the two resources Subscription (posted by the
    catalog consumer) and Topic (published by the catalog custodian). An instance of Subscription
    represents a request for notifications of events, which are described in the Topic resource
    referenced by this instance.</p>
  <p>To be continued now that the IG is migrated to R5</p>
</div>
